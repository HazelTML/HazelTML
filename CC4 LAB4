import java.util.*;

public class ExpressionConverter {

    private static int precedence(char ch) {
        if (ch == '^') return 3;
        else if (ch == '*' || ch == '/' || ch == '%') return 2;
        else if (ch == '+' || ch == '-') return 1;
        else return 0;
    }

    private static boolean isRightAssociative(char ch) {
        return ch == '^';
    }

    private static boolean isOperand(char ch) {
        return Character.isLetterOrDigit(ch);
    }

    private static boolean isBalanced(String expression) {
        Stack<Character> stack = new Stack<>();
        for (char ch : expression.toCharArray()) {
            if (ch == '(') stack.push(ch);
            else if (ch == ')') {
                if (stack.isEmpty() || stack.pop() != '(') return false;
            }
        }
        return stack.isEmpty();
    }

    private static String infixToPostfix(String infix) {
        Stack<Character> stack = new Stack<>();
        StringBuilder postfix = new StringBuilder();

        for (int i = 0; i < infix.length(); i++) {
            char currentChar = infix.charAt(i);

            if (isOperand(currentChar)) {
                postfix.append(currentChar);
            } else if (currentChar == '(') {
                stack.push(currentChar);
            } else if (currentChar == ')') {
                while (!stack.isEmpty() && stack.peek() != '(') {
                    postfix.append(stack.pop());
                }
                stack.pop();
            } else {
                while (!stack.isEmpty() &&
                       (precedence(stack.peek()) > precedence(currentChar) ||
                        (precedence(stack.peek()) == precedence(currentChar) && !isRightAssociative(currentChar)))) {
                    postfix.append(stack.pop());
                }
                stack.push(currentChar);
            }
        }

        while (!stack.isEmpty()) {
            postfix.append(stack.pop());
        }

        return postfix.toString();
    }

    private static String reverse(String str) {
        return new StringBuilder(str).reverse().toString();
    }

    private static String infixToPrefix(String infix) {
        String reversedInfix = reverse(infix);

        StringBuilder infixWithReversedParentheses = new StringBuilder();
        for (char c : reversedInfix.toCharArray()) {
            if (c == '(') infixWithReversedParentheses.append(')');
            else if (c == ')') infixWithReversedParentheses.append('(');
            else infixWithReversedParentheses.append(c);
        }

        String postfix = infixToPostfix(infixWithReversedParentheses.toString());
        return reverse(postfix);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            try {
                System.out.print("Enter infix: ");
                String infix = scanner.nextLine().replaceAll("\\s+", "");

                if (!isBalanced(infix)) {
                    throw new IllegalArgumentException("Unbalanced parentheses.");
                }

                String postfix = infixToPostfix(infix);
                String prefix = infixToPrefix(infix);

                System.out.println("Prefix: " + prefix);
                System.out.println("Postfix: " + postfix);

                System.out.print("Do you want to enter another expression? (yes/no): ");
                if (scanner.nextLine().equalsIgnoreCase("no")) {
                    System.out.println("Goodbye!");
                    break;
                }
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }

        scanner.close();
    }
}