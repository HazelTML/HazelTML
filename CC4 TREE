import java.util.Scanner;

public class TreeArrayProgram {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Ask user for inputs
        System.out.print("Enter the size of the tree (n): ");
        int n = scanner.nextInt();
        System.out.print("Enter the starting value of the tree: ");
        int start = scanner.nextInt();

        // Create and populate the Tree array
        int[] Tree = new int[n];
        Tree[0] = start;
        for (int i = 1; i < n; i++) {
            Tree[i] = Tree[i - 1] + 1;
        }

        // Print the array Tree
        System.out.print("Tree array: ");
        for (int value : Tree) {
            System.out.print(value + " ");
        }
        System.out.println();

        // Ask user for choice
        System.out.print("Enter your choice: ");
        int choice = scanner.nextInt();

        // Check if the choice is valid
        int indexOfChoice = -1;  // Initialize with an invalid index
        for (int i = 0; i < n; i++) {
            if (Tree[i] == choice) {
                indexOfChoice = i;  // Store the index of the choice
                break;
            }
        }

        if (indexOfChoice == -1) {
            System.out.println("Invalid");
        } else {
            // Rearrange the Tree array so the choice becomes the root
            System.out.println("Choice is now the tree root: " + choice);

            // Create a new Tree with the choice at the root
            int[] updatedTree = new int[n];
            
            // Copy the elements from the original Tree starting from the choice index to the new array
            for (int i = 0; i < n - indexOfChoice; i++) {
                updatedTree[i] = Tree[indexOfChoice + i];
            }
            
            // Fill the remaining part of the array with the elements before the choice
            for (int i = 0; i < indexOfChoice; i++) {
                updatedTree[n - indexOfChoice + i] = Tree[i] + n;
            }

            // Print the updated Tree array
            System.out.print("Updated Tree array: ");
            for (int value : updatedTree) {
                System.out.print(value + " ");
            }
            System.out.println();
        }

        scanner.close();
    }
}

//VOICE RECORDING MUST BE 1-3 MINS ONLY

Here is a brief explanation of my code and demonstrating its execution using my own input values. 

The program begins by asking the user for two inputs:

First is the size of the tree which is (n), this determines how many elements the array will have.
Second is the starting value or the first element in the array, and each subsequent element increments by 1 until the array is full.

In our case, if the user inputs n as 5 and starting value as 10, the tree array will contain be [10, 11, 12, 13, 14], named Tree.

The program then displays this array to the user.

After which, the program will ask the user to select a value from the array, called choice.

If the user’s choice is not in the array, the program displays ‘Invalid’. 
This ensures the user cannot select a value outside the valid range of the array.
Otherwise, if the choice is valid, the program recognizes it as the new root of the tree and will proceed to update the tree.

For example, if the user selects 12 from the array, the program highlights 12 as the root. The updated output will be [12, 13, 14, 15, 16].

This gives users the flexibility to manipulate the tree dynamically.

In summary, this program demonstrates how we can use Java to build and manipulate data structures based on user inputs. It combines fundamental concepts like arrays, user input validation, and dynamic updates. This makes it a practical example of how to manage and present data interactively.
