import java.util.Scanner;
import java.util.Stack;
import java.util.LinkedList;
import java.util.Queue;

public class StackQueueProgram {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Would you like to use a Stack or a Queue? (Enter 'stack' or 'queue')");
        String choice = scanner.nextLine().toLowerCase();

        System.out.print("Enter the size of the array (n): ");
        int n = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        if (choice.equals("stack")) {
            Stack<Integer> stack = new Stack<>();
            while (true) {
                System.out.println("Choose an operation: push or pop");
                String operation = scanner.nextLine().toLowerCase();

                if (operation.equals("push")) {
                    if (stack.size() < n) {
                        System.out.print("Enter an integer to push: ");
                        int value = scanner.nextInt();
                        scanner.nextLine(); // Consume the newline character
                        stack.push(value);
                        System.out.println("Pushed " + value + " to the stack.");
                    } else {
                        System.out.println("Stack is full. Cannot push more elements.");
                    }
                } else if (operation.equals("pop")) {
                    if (!stack.isEmpty()) {
                        int popped = stack.pop();
                        System.out.println("Popped " + popped + " from the stack.");
                    } else {
                        System.out.println("Stack is empty. Cannot pop elements.");
                    }
                } else {
                    System.out.println("Invalid operation. Please choose 'push' or 'pop'.");
                }

                System.out.println("Do you want to continue or end? (Enter 'continue' or 'end')");
                String decision = scanner.nextLine().toLowerCase();
                if (decision.equals("end")) {
                    System.out.println("Final Stack: " + stack);
                    break;
                }
            }
        } else if (choice.equals("queue")) {
            Queue<Integer> queue = new LinkedList<>();
            while (true) {
                System.out.println("Choose an operation: enqueue or dequeue");
                String operation = scanner.nextLine().toLowerCase();

                if (operation.equals("enqueue")) {
                    if (queue.size() < n) {
                        System.out.print("Enter an integer to enqueue: ");
                        int value = scanner.nextInt();
                        scanner.nextLine(); // Consume the newline character
                        queue.add(value);
                        System.out.println("Enqueued " + value + " to the queue.");
                    } else {
                        System.out.println("Queue is full. Cannot enqueue more elements.");
                    }
                } else if (operation.equals("dequeue")) {
                    if (!queue.isEmpty()) {
                        int dequeued = queue.poll();
                        System.out.println("Dequeued " + dequeued + " from the queue.");
                    } else {
                        System.out.println("Queue is empty. Cannot dequeue elements.");
                    }
                } else {
                    System.out.println("Invalid operation. Please choose 'enqueue' or 'dequeue'.");
                }

                System.out.println("Do you want to continue or end? (Enter 'continue' or 'end')");
                String decision = scanner.nextLine().toLowerCase();
                if (decision.equals("end")) {
                    System.out.println("Final Queue: " + queue);
                    break;
                }
            }
        } else {
            System.out.println("Invalid choice. Please restart and choose 'stack' or 'queue'.");
        }

        scanner.close();
    }
}