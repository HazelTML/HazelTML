/*Salvador, Hazel Angela M.
Final Challenge No. 4: Linked Lists Application
December 4, 2024*/

import java.util.Scanner;

public class Mplaylist {
  
    // Create node class to represent each song in the playlist
    private class Node {
        String song;
        Node prev, next;

        Node(String song) {
            this.song = song;
            this.prev = this;  // this points to itself initially
            this.next = this;  // this points to itself initially
        }
    }

    private Node current;  // this points to the current song in the playlist

    // Requirement 1: Add a song to the playlist
    public void addSong(String song) {
        Node newSong = new Node(song);
        
        if (current == null) {
            current = newSong;  // If the playlist is empty, this will be the first song
        } else {
            Node last = current.prev;   // indicates the node before the current node
            last.next = newSong;        // Point the last node to the new song
            newSong.prev = last;        // Point the new song's prev to the last node
            newSong.next = current;     // Point the new song's next to the current song
            current.prev = newSong;     // Point the current song's prev to the new song
        }
    }
    
    // Requirement 2: Remove a song from the playlist, maintaining circular links
    public void removeSong(String song) {
        if (current == null) {
            System.out.println("No songs in the playlist.");
            return;
        }

        Node temp = current;
        do {
            if (temp.song.equals(song)) {
                if (temp == current && temp.next == current) {
                    current = null;  // if there is only one song in the playlist
                } else {
                    temp.prev.next = temp.next;  // this will skip the node to remove it
                    temp.next.prev = temp.prev;  // this will maintain the circular link
                    if (temp == current) {
                        current = temp.next;  // it move ps the current to the next song
                    }
                }
                System.out.println("Removed song: " + song);
                return;
            }
            temp = temp.next;
        } while (temp != current);  // Loop until we go back to the starting node
        System.out.println("Song not found: " + song);
    }
    
    // Requirement 3: Move to the next song in the playlist (loop back to first song if at the end)
    public void nextSong() {
        if (current == null) {
            System.out.println("No songs in the playlist.");
            return;
        }
        current = current.next;  // the system will move to the next song
        System.out.println("Now playing: " + current.song);
    }

    // Requirement 3: Move to the previous song in the playlist (loop back to last song if at the start)
    public void previousSong() {
        if (current == null) {
            System.out.println("No songs in the playlist.");
            return;
        }
        current = current.prev;  // the system will move to the previous song
        System.out.println("Now playing: " + current.song);
    }

    // Display the current song
    public void displayCurrentSong() {
        if (current == null) {
            System.out.println("No songs in the playlist.");
            return;
        }
        System.out.println("Current song: " + current.song);
    }

    // This will display the entire playlist
    public void displayPlaylist() {
        if (current == null) {
            System.out.println("No songs in the playlist.");
            return;
        }

        Node temp = current;
        System.out.println("Playlist:");
        do {
            System.out.println(temp.song);
            temp = temp.next;
        } while (temp != current);  // it will create a loop back to the starting node
    }

    // The main method to interact with the playlist
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Mplaylist playlist = new Mplaylist();
        
        while (true) {
            // Display menu options
            System.out.println("\n=====Music Playlist Manager=====");
            System.out.println("1. Add Song");
            System.out.println("2. Remove Song");
            System.out.println("3. Move to Next Song");
            System.out.println("4. Move to Previous Song");
            System.out.println("5. Display Current Song");
            System.out.println("6. Display Playlist");
            System.out.println("7. Exit");
            System.out.print("Choose an option: ");
            
            int choice = scanner.nextInt();
            scanner.nextLine();  // this will consume the newline character

            switch (choice) {
                case 1:
                    // Case to add song
                    System.out.print("Enter song name to add: ");
                    String songToAdd = scanner.nextLine();
                    playlist.addSong(songToAdd);
                    break;

                case 2:
                    // Case to remove Song
                    System.out.print("Enter song name to remove: ");
                    String songToRemove = scanner.nextLine();
                    playlist.removeSong(songToRemove);
                    break;

                case 3:
                    // Case to move to the next Song
                    playlist.nextSong();
                    break;

                case 4:
                    // Case to move to the previous Song
                    playlist.previousSong();
                    break;

                case 5:
                    // Case to display Current Song
                    playlist.displayCurrentSong();
                    break;

                case 6:
                    // Case to display Playlist
                    playlist.displayPlaylist();
                    break;

                case 7:
                    // Case for exit
                    System.out.println("Exiting the Playlist Manager.");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }
}